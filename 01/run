#!/bin/bash
export PATH=/usr/bin:/usr/local/bin/

# The $(pass aoc) outputs an active session ID which can be copied from
# the Network debug tools tab in Chrome (look for Copy as cURL).

x.fetch() {
  curl -sSL 'https://adventofcode.com/2021/day/1/input' \
    -H "cookie:  session=$(pass aoc)" -o input
}

x.solve.part1() {

  # count the number of times a depth measurement increases from the
  # previous measurement

  declare previous current count 
  while IFS= read -r current; do 
    if [[ -z "$previous" ]]; then
      previous=$current
      continue
    fi
    #echo "$current > $previous ?"
    ((current > previous)) && ((count++))
    previous=$current
  done < input
  echo "$count"
}

x.solve.part2() {
  local -a values
  local -i pointer=0
  mapfile -t values < input
  #echo "${values[0]}"
  #echo "${values[@]:0:3}"
  while (( pointer < ${#values[@]} -2 )); do
    printf "line: "
    local -i tot=0 i prev
    for (( i=0; i < 3; i++ )); do
      val=${values[$((pointer+i))]}
      printf "%s " "$val"
      tot=$((tot+val))
    done
    printf " = %s " $tot
    if [[ -n "$prev" ]]; then
      (( tot > prev )) && ((times++)) && printf "increased"
    fi
    printf "\n"
    prev=$tot
    ((pointer++))
  done
  printf "Increases %s times\n" "$times"
}

# ------------------------ complete -C run run -----------------------

# add functions beginning with x. to COMMANDS
while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=( "${line##declare -f x.}" )
done < <(declare -F)
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

# complete if completion context detect (complete -C kapp kapp)
if [[ -n $COMP_LINE ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

# delegate to COMMAND passed as first argument
if [[ -n "$1" ]]; then
  declare CMD="$1"; shift
  for c in "${COMMANDS[@]}"; do
    if [[ $c == "$CMD" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi
